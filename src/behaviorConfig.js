// WARNING: DO NOT EDIT THIS FILE, IT IS AUTOGENERATED
module.exports = {
  addonType: "behavior",
  id: "skymen_buffed_value",
  name: "Buffable Value",
  version: "1.0.0.3",
  category:
    // "attributes",
    // "movements",
    // "other",
    "general",
  author: "skymen",
  website: "https://www.construct.net",
  documentation: "https://www.construct.net",
  description: "Description",
  // icon: "icon.svg", // defaults to "icon.svg" if omitted
  // addonUrl: "https://www.construct.net/en/make-games/addons/####/XXXX", // displayed in auto-generated docs
  // githubUrl: "https://github.com/skymen/XXXX", // displays latest release version in auto-generated docs
  fileDependencies: [
    /*
    {
      filename: "filename.js", // no need to include "c3runtime/" prefix
      type:
        "copy-to-output"
        "inline-script"
        "external-dom-script"
        "external-runtime-script"
        "external-css"

      // for copy-to-output only
      // fileType: "image/png"
    }
    */
  ],
  info: {
    Set: {
      IsOnlyOneAllowed: false,
      CanBeBundled: true,
      IsDeprecated: false,
    },
  },
  properties: [
    /*
    {
      type:
        "integer"
        "float"
        "percent"
        "text"
        "longtext"
        "check"
        "font"
        "combo"
        "group"
        "link"
        "info"

      id: "property_id",
      options: {
        initialValue: 0,
        interpolatable: false,

        // minValue: 0, // omit to disable
        // maxValue: 100, // omit to disable

        // for type combo only
        // items: [
        //   {itemId1: "item name1" },
        //   {itemId2: "item name2" },
        // ],

        // dragSpeedMultiplier: 1, // omit to disable

        // for type link only
        // linkCallback: `function(instOrObj) {}`,
        // linkText: "Link Text",
        // callbackType:
        //   "for-each-instance"
        //   "once-for-type"

        // for type info only
        // infoCallback: `function(inst) {}`,
      },
      name: "Property Name",
      desc: "Property Description",
    }
    */
    {
      type: "float",
      id: "buffedValue",
      options: {
        initialValue: 100,
        interpolatable: false,
      },
      name: "Value",
      desc: "Value",
    },
    {
      type: "float",
      id: "buffedValueMax",
      options: {
        initialValue: 100,
        interpolatable: false,
      },
      name: "Max",
      desc: "Max",
    },
    {
      type: "float",
      id: "buffedValueMin",
      options: {
        initialValue: 0,
        interpolatable: false,
      },
      name: "Min",
      desc: "Min",
    },
    {
      type: "combo",
      id: "clampMode",
      options: {
        initialValue: "after",
        items: [
          { after: "Clamp After Buffs" },
          { before: "Clamp Before Buffs" },
        ],
      },
    },
  ],
  aceCategories: {
    // follows the format id: langName
    // in the ACEs refer to categories using the id, not the name
    general: "General",
    buffs: "Buffs",
  },
  Acts: {
    /*
    SampleAction: {
      // The category of the action as it appears in the add action dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this action
      // Cases where you might not want this are:
      // 1- If the action params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the action in the add action dialog
      highlight: true,

      // Set to true to hide the action in the interface. False by default if not specified.
      deprecated: false,

      // Marks the action as async. Defaults to false if not specified.
      isAsync: false,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          value: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the action as it appears in the add action dialog
      listName: "Sample Action",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      // You can also use the {my} tag to include the behavior icon and name.
      displayText: "{my}: Sample action [i]{0}[/i]",

      // The description of the action as it appears in the add action dialog
      description: "This is a sample action",
    },
    */
    SetValue: {
      category: "general",
      forward: "_SetValue",
      autoScriptInterface: true,
      params: [
        {
          id: "value",
          name: "Value",
          desc: "Value",
          type: "number",
          value: "0",
        },
      ],
      listName: "Set value",
      displayText: "{my}: Set value to [i]{0}[/i]",
      description: "Set value",
    },
    SetMax: {
      category: "general",
      forward: "_SetMax",
      autoScriptInterface: true,
      params: [
        {
          id: "value",
          name: "Value",
          desc: "Value",
          type: "number",
          value: "0",
        },
      ],
      listName: "Set max",
      displayText: "{my}: Set max to [i]{0}[/i]",
      description: "Set max",
    },
    SetMin: {
      category: "general",
      forward: "_SetMin",
      autoScriptInterface: true,
      params: [
        {
          id: "value",
          name: "Value",
          desc: "Value",
          type: "number",
          value: "0",
        },
      ],
      listName: "Set min",
      displayText: "{my}: Set min to [i]{0}[/i]",
      description: "Set min",
    },
    ApplyPercentBuff: {
      category: "buffs",
      forward: "_ApplyPercentBuff",
      autoScriptInterface: true,
      params: [
        {
          id: "buffId",
          name: "Buff ID",
          desc: "Buff ID",
          type: "string",
          value: "",
        },
        {
          id: "value",
          name: "Value as a percentage",
          desc: "Value",
          type: "number",
          value: "0",
        },
        {
          id: "duration",
          name: "Duration",
          desc: "Duration",
          type: "number",
          value: "0",
        },
      ],
      listName: "Apply buff",
      displayText:
        "{my}: Apply buff [i]{0}[/i] with value [i]{1}[/i]% for [i]{2}[/i] seconds",
      description: "Apply buff",
    },
    ApplyFixedBuff: {
      category: "buffs",
      forward: "_ApplyFixedBuff",
      autoScriptInterface: true,
      params: [
        {
          id: "buffId",
          name: "Buff ID",
          desc: "Buff ID",
          type: "string",
          value: "",
        },
        {
          id: "value",
          name: "Value",
          desc: "Value",
          type: "number",
          value: "0",
        },
        {
          id: "duration",
          name: "Duration",
          desc: "Duration",
          type: "number",
          value: "0",
        },
      ],
      listName: "Apply fixed buff",
      displayText:
        "{my}: Apply buff [i]{0}[/i] with value [i]{1}[/i] for [i]{2}[/i] seconds",
      description: "Apply fixed buff",
    },
    StopBuff: {
      category: "buffs",
      forward: "_StopBuff",
      autoScriptInterface: true,
      params: [
        {
          id: "buffId",
          name: "Buff ID",
          desc: "Buff ID",
          type: "string",
          value: "",
        },
      ],
      listName: "Stop buff",
      displayText: "{my}: Stop buff [i]{0}[/i]",
      description: "Stop buff",
    },
    StopAllBuffs: {
      category: "buffs",
      forward: "_StopAllBuffs",
      autoScriptInterface: true,
      params: [],
      listName: "Stop all buffs",
      displayText: "{my}: Stop all buffs",
      description: "Stop all buffs",
    },
  },
  Cnds: {
    /*
    SampleCondition: {
      // The category of the action as it appears in the add condition dialog
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this condition
      // Cases where you might not want this are:
      // 1- If the condition params are incompatible with the script interface
      // 2- If you don't want it to appear in the script interface
      // 3- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the condition in the add condition dialog
      highlight: true,

      // Set to true to hide the condition in the interface. False by default if not specified.
      deprecated: false,

      // special conditions properties. These can all be omitted, and they will default to the following values:
      isTrigger: false,
      isFakeTrigger: false,
      isStatic: false,
      isLooping: false,
      isInvertible: true,
      isCompatibleWithTriggers: true,

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
            - "boolean"

            // The following types can take a default value but CANNOT be automatically generated in the script interface
            - "combo"

            // The following types CANNOT take a default value AND CANNOT be automatically generated in the script interface
            - "cmp"
            - "object"
            - "objectname"
            - "layer"
            - "layout"
            - "keyb"
            - "instancevar"
            - "instancevarbool"
            - "eventvar"
            - "eventvarbool"
            - "animation"
            - "objinstancevar"

          // The default value of the parameter. Can be omitted if the type is not a string, number, any, boolean or combo.
          value: "the default value of the parameter",

          // Only for type "combo"
          items: [
            {"itemId1": "itemName1"},
            {"itemId2": "itemName2"},
            {"itemId3": "itemName3"},
          ],

          // Only for type "object"
          allowedPluginIds: ["Sprite", "TiledBg"],
        },
      ],

      // The name of the condition as it appears in the add condition dialog
      listName: "Sample Condition",

      // The text that appears in the event sheet. Note, every single param must be used in the display text.
      // You can also use [b] and [i] tags.
      // You can also use the {my} tag to include the behavior icon and name.
      displayText: "{my}: Sample condition [i]{0}[/i]",

      // The description of the condition as it appears in the add condition dialog
      description: "This is a sample condition",
    },
    */
    HasAnyBuff: {
      category: "buffs",
      forward: "_HasAnyBuff",
      autoScriptInterface: true,
      params: [],
      listName: "Has any buff",
      displayText: "{my}: Has any buff",
      description: "Has any buff",
    },
    HasBuff: {
      category: "buffs",
      forward: "_HasBuff",
      autoScriptInterface: true,
      params: [
        {
          id: "buffId",
          name: "Buff ID",
          desc: "Buff ID",
          type: "string",
          value: "",
        },
      ],
      listName: "Has buff",
      displayText: "{my}: Has buff [i]{0}[/i]",
      description: "Has buff",
    },
    IsAtMax: {
      category: "general",
      forward: "_IsAtMax",
      autoScriptInterface: true,
      params: [],
      listName: "Is at max",
      displayText: "{my}: Is at max",
      description: "Is at max",
    },
    IsAtMin: {
      category: "general",
      forward: "_IsAtMin",
      autoScriptInterface: true,
      params: [],
      listName: "Is at min",
      displayText: "{my}: Is at min",
      description: "Is at min",
    },
    OnBuffStarted: {
      category: "buffs",
      forward: "_OnBuffStarted",
      autoScriptInterface: true,
      params: [
        {
          id: "buffId",
          name: "Buff ID",
          desc: "Buff ID",
          type: "string",
          value: "",
        },
      ],
      listName: "On buff started",
      displayText: "{my}: On buff {0} started",
      description: "On buff started",
      isTrigger: true,
    },
    OnBuffEnded: {
      category: "buffs",
      forward: "_OnBuffEnded",
      autoScriptInterface: true,
      params: [
        {
          id: "buffId",
          name: "Buff ID",
          desc: "Buff ID",
          type: "string",
          value: "",
        },
      ],
      listName: "On buff ended",
      displayText: "{my}: On buff {0} ended",
      description: "On buff ended",
      isTrigger: true,
    },
    OnAnyBuffStarted: {
      category: "buffs",
      forward: "_OnAnyBuffStarted",
      autoScriptInterface: true,
      params: [],
      listName: "On any buff started",
      displayText: "{my}: On any buff started",
      description: "On any buff started",
      isTrigger: true,
    },
    OnAnyBuffEnded: {
      category: "buffs",
      forward: "_OnAnyBuffEnded",
      autoScriptInterface: true,
      params: [],
      listName: "On any buff ended",
      displayText: "{my}: On any buff ended",
      description: "On any buff ended",
      isTrigger: true,
    },
    ForEachBuff: {
      category: "buffs",
      forward: "_ForEachBuff",
      autoScriptInterface: false,
      params: [],
      listName: "For each buff",
      displayText: "{my}: For each buff",
      description: "For each buff",
      isLooping: true,
      isInvertible: false,
    },
    ForEachPercentBuff: {
      category: "buffs",
      forward: "_ForEachPercentBuff",
      autoScriptInterface: false,
      params: [],
      listName: "For each percent buff",
      displayText: "{my}: For each percent buff",
      description: "For each percent buff",
      isLooping: true,
      isInvertible: false,
    },
    ForEachStaticBuff: {
      category: "buffs",
      forward: "_ForEachStaticBuff",
      autoScriptInterface: false,
      params: [],
      listName: "For each static buff",
      displayText: "{my}: For each static buff",
      description: "For each static buff",
      isLooping: true,
      isInvertible: false,
    },
  },
  Exps: {
    /*
    SampleExpression: {
      // The category of the action as it appears in the expression picker
      category: "general",

      // Forward to the instance function name
      forward: "_SampleAction",
      // Or specify a handler function
      handler: `function () {
        // Your code here
      }`,

      // Set to true to automatically generate a script interface for this expression
      // Cases where you might not want this are:
      // 1- If you don't want it to appear in the script interface
      // 2- If the script interface has a better way to achieve the same thing
      autoScriptInterface: true,

      // Set to true to highlight the expression in the expression picker
      highlight: true,

      // Set to true to hide the expression in the interface. False by default if not specified.
      deprecated: false,

      // The type of the expression.
      returnType:
        - "string"
        - "number"
        - "any" // must be either string or number

      // Set to true if the expression is variadic. False by default if not specified.
      isVariadicParameters: false

      // list of parameters
      params: [
        {
          // The id of the parameter. This is used to generate the script interface.
          // It must be unique for each parameter.
          id: "param1",
          // The name of the parameter.
          name: "Param 1",
          // The description of the parameter.
          desc: "The first parameter",

          // The type of the parameter.
          type:
            // The following types can take a default value AND be automatically generated in the script interface
            - "string"
            - "number"
            - "any"
        },
      ],

      // The description of the expression as it appears in the expression picker
      description: "This is a sample expression",
    },
    */
    Value: {
      category: "general",
      forward: "_Value",
      autoScriptInterface: true,
      params: [],
      returnType: "number",
      listName: "Value",
      description: "Value with all buffs applied",
    },
    BaseValue: {
      category: "general",
      forward: "_BaseValue",
      autoScriptInterface: true,
      params: [],
      returnType: "number",
      listName: "Base value",
      description: "Base value with no buffs",
    },
    RawValue: {
      category: "general",
      forward: "_RawValue",
      autoScriptInterface: true,
      params: [],
      returnType: "number",
      listName: "Raw value",
      description: "Raw value with all buffs applied but no min/max clamping",
    },
    Max: {
      category: "general",
      forward: "_Max",
      autoScriptInterface: true,
      params: [],
      returnType: "number",
      listName: "Max",
      description: "Max",
    },
    Min: {
      category: "general",
      forward: "_Min",
      autoScriptInterface: true,
      params: [],
      returnType: "number",
      listName: "Min",
      description: "Min",
    },
    AllPercentBuffs: {
      category: "buffs",
      forward: "_AllPercentBuffs",
      autoScriptInterface: true,
      params: [],
      returnType: "number",
      listName: "All percent buffs",
      description: "All percent buffs accumulated",
    },
    AllFixedBuffs: {
      category: "buffs",
      forward: "_AllFixedBuffs",
      autoScriptInterface: true,
      params: [],
      returnType: "number",
      listName: "All fixed buffs",
      description: "All fixed buffs accumulated",
    },
    BuffCount: {
      category: "buffs",
      forward: "_BuffCount",
      autoScriptInterface: true,
      params: [],
      returnType: "number",
      listName: "Buff count",
      description: "Buff count",
    },
    BuffTime: {
      category: "buffs",
      forward: "_BuffTime",
      autoScriptInterface: true,
      params: [
        {
          id: "buffId",
          name: "Buff ID",
          desc: "Buff ID",
          type: "string",
          value: "",
        },
      ],
      returnType: "number",
      listName: "Time",
      description: "Time",
    },
    FixedBuffValue: {
      category: "buffs",
      forward: "_FixedBuffValue",
      autoScriptInterface: true,
      params: [
        {
          id: "buffId",
          name: "Buff ID",
          desc: "Buff ID",
          type: "string",
          value: "",
        },
      ],
      returnType: "number",
      listName: "Value",
      description: "Value",
    },
    PercentBuffValue: {
      category: "buffs",
      forward: "_PercentBuffValue",
      autoScriptInterface: true,
      params: [
        {
          id: "buffId",
          name: "Buff ID",
          desc: "Buff ID",
          type: "string",
          value: "",
        },
      ],
      returnType: "number",
      listName: "Value",
      description: "Value",
    },
    BuffProgress: {
      category: "buffs",
      forward: "_BuffProgress",
      autoScriptInterface: true,
      params: [
        {
          id: "buffId",
          name: "Buff ID",
          desc: "Buff ID",
          type: "string",
          value: "",
        },
      ],
      returnType: "number",
      listName: "Progress",
      description: "Progress",
    },
    BuffDuration: {
      category: "buffs",
      forward: "_BuffDuration",
      autoScriptInterface: true,
      params: [
        {
          id: "buffId",
          name: "Buff ID",
          desc: "Buff ID",
          type: "string",
          value: "",
        },
      ],
      returnType: "number",
      listName: "Duration",
      description: "Duration",
    },
    LastBuff: {
      category: "buffs",
      forward: "_LastBuff",
      autoScriptInterface: true,
      params: [],
      returnType: "string",
      listName: "Last buff",
      description: "Last buff",
    },
  },
};
